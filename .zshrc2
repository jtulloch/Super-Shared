alias jssnip='sh /home/shared/snippets.sh javascript_snippets'
alias phpsnip='sh /home/shared/snippets.sh php_snippets'

if [ -f $HOME/.curverc ]; then
    source $HOME/.curverc
fi

#
# Hero Aliases
#
alias listA='cat ~/.zshrc |grep alias && cat /home/shared/.zshrc2 |grep alias'
alias zrc='vi ~/.zshrc && source ~/.zshrc'
alias zrcs='sudo vi /home/shared/.zshrc2 && source ~/.zshrc'
alias svnvimdiff="svn diff --diff-cmd /home/dale/scripts/vimdiff-svn-wrapper.sh"
alias svnconflict='svn st | egrep "^C"'
alias svnUp='sh /home/shared/scripts/svnupdate.sh'
alias svncommit='sh /home/shared/scripts/svnCommit.sh'
alias taillog='tail -F ~/public_html/*/log/*.log'
alias cleanlog='echo -n > ~/public_html/*/log/*'
alias hero='cd $CURVESPACE/$CURVEPROJECT'
alias root='. ~/script/gotoProjectRoot.sh || hero'
alias gotoHeroPath='root && cd' # Shortcut for other aliases to use.  Not really intended to be used by humans but could be.
alias app='gotoHeroPath app'
alias contr='gotoHeroPath app/controllers'
alias model='gotoHeroPath app/models'
alias claim='gotoHeroPath app/lib/claim'
alias conv='gotoHeroPath app/lib/conversion/lib'
alias views='gotoHeroPath app/views'
alias inst='gotoHeroPath app/installers'
alias procs='gotoHeroPath app/installers/storedProcedures'
alias public='gotoHeroPath public'
alias script='gotoHeroPath public/javascripts'
alias widget='gotoHeroPath public/javascripts/curve'
alias style='gotoHeroPath public/stylesheets/curve'
alias dojo='gotoHeroPath public/javascripts/dojo/'
alias dijit='gotoHeroPath public/javascripts/dijit/'
alias dojox='gotoHeroPath public/javascripts/dojox/'
alias ak='gotoHeroPath akelos/lib/'
alias func='gotoHeroPath test/functional/controllers/'
alias unit='gotoHeroPath test/unit/app/'
alias tstfunc='root && ./script/test test/functional'
alias tstunit='root && ./script/test test/unit'
alias tstall='root && ./script/test test/unit && ./script/test test/functional'
alias tdata='gotoHeroPath test/fixtures/app/installers/data'
alias db='psql $CURVEPROJECT'
alias testdb='psql test_$CURVEPROJECT'
alias cleandb='root && psql -f ${CURVEPROJECT}_dump.sql $CURVEPROJECT'
alias dumpdb='root && pg_dump --clean -U ${CURVEPROJECT} -f ${CURVEPROJECT}_dump.sql ${CURVEPROJECT}'
alias loadtestdata='root && dropdb ${CURVEPROJECT} && createdb -O ${CURVEPROJECT} ${CURVEPROJECT} && psql ${CURVEPROJECT} -f app/installers/data/default_test_data.sql && cd -'
alias dumptestdata='root && pg_dump -O ${CURVEPROJECT} > app/installers/data/default_test_data.sql && cd -'

runtest() {
    local testCommand
    local testArg
    testCommand='./script/test'
    testArg='test/'

    if [ -z $1 ]; then
        echo "No file specified"
    else
        case $1 in
        "-f"*)
            testArg+='functional'

            if [ "${2}" != "all" ]; then
                testArg+="/controllers/"
            fi
        ;;
        "-m"*)
            testArg+='unit'

            if [ "${2}" != "all" ]; then
                testArg+="/app/models/"
            fi
        ;;
        "-u"*)
            testArg+='unit/us/'
        ;;
        "-l"*)
            testArg+='unit/app/lib/'
        ;;
        esac

        if [ "${2}" != "all" ]; then
            testArg+="${2}"
        fi

        cd ${CURVESPACE}/${CURVEPROJECT} && ${testCommand} ${testArg}
    fi
}

proj () {
    if [ -z $1 ]; then
        selectProject
    else
        export CURVEPROJECT=$1
        export RPROMPT='['$CURVEPROJECT']'
        hero
    fi
}

clearProject() {
    export CURVEPROJECT=''
    setprompt
}

selectProject() {
    CURVEPROJECTS=()
    PROJCOUNT=1

#This is to make the for loop parse by new lines instead of whitespace
IFS_BAK=$IFS
IFS="
"
    for PROJ in `listHeroes.sh`
    do
        CURVEPROJECTS+=($PROJ)
        echo "${PROJCOUNT}) ${PROJ}"
        PROJCOUNT=$(( $PROJCOUNT + 1 ))
    done
IFS=$IFS_BAK
IFS_BAK=

    read ANSWER;
    if [ "${ANSWER}" -ne "" ]; then
        proj ${CURVEPROJECTS[$ANSWER]%% *}
    else
        proj ${CURVEPROJECT}
    fi
}

#
# Prompt
#
autoload colors; colors

for COLOR in RED GREEN BLUE YELLOW WHITE BLACK CYAN MAGENTA; do
    eval PR_$COLOR='%{$fg[${(L)COLOR}]%}'
    eval PR_BRIGHT_$COLOR='%{$fg_bold[${(L)COLOR}]%}'
done
PR_RESET="%{${reset_color}%}";
RPROMPT='%~/'

cd() {
    builtin cd $@
    setprompt
}

setprompt() {
    if [ "${CURVEPROJECT}" = "" ]; then
        PROMPT="${PR_BLUE}$HOST${PR_RESET}${PR_YELLOW}->${PR_RESET}"
    else
        CURRENTPATH=`pwd`
        case $CURRENTPATH in
        ${CURVESPACE}/${CURVEPROJECT}*)
            PROMPT="${PR_BLUE}$HOST${PR_RESET}${PR_YELLOW} - ${PR_RESET}${PR_GREEN}$CURVEPROJECT${PR_RESET}${PR_YELLOW}->${PR_RESET}"
        ;;
        ${CURVESPACE}/*)
            PROMPT="${PR_BLUE}$HOST${PR_RESET}${PR_YELLOW} - ${PR_RESET}${PR_RED}$CURVEPROJECT${PR_RESET}${PR_YELLOW}->${PR_RESET}"
        ;;
        *)
            PROMPT="${PR_BLUE}$HOST${PR_RESET}${PR_YELLOW} - ${PR_RESET}${PR_RED}$CURVEPROJECT${PR_RESET}${PR_YELLOW}->${PR_RESET}"
        ;;
        esac
    fi
}

RPROMPT='%~/'
setprompt

blame() {
    svn blame -v $1 | awk '{$3=$2;$2=$1;$1=NR;$4=$5=$6=$7=$8=$9="";gsub(FS "+","\t")}1'
}

commitCheck () {
    svn diff | grep -i "XXX\|TODO\|debug\|wtf\|dumpObject" | egrep -v "^-"
}

#SHAREDFOLDER=/home/compton/shared/shared
#fpath=(${SHAREDFOLDER}/.fun $fpath)
#autoload -U ${SHAREDFOLDER}/.fun/*(:t)
#compinit

